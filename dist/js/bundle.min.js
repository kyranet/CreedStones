!function(e){var t={};function a(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,s){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(s,r,function(t){return e[t]}.bind(null,r));return s},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=4)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.up=0]="up",e[e.down=1]="down",e[e.right=2]="right",e[e.left=3]="left"}(t.Direction||(t.Direction={})),function(e){e[e.stop=0]="stop",e[e.move=1]="move"}(t.BoulderState||(t.BoulderState={})),function(e){e[e.none=0]="none",e[e.bushes=1]="bushes",e[e.cave=2]="cave",e[e.haystack=3]="haystack"}(t.HidingType||(t.HidingType={})),t.CharacterState={dead:0,run:1,stand:2,walk:3},t.PlayerState=Object.assign({},t.CharacterState,{hidden:4}),t.EnemyState=Object.assign({},t.CharacterState,{onRoute:4,pursuit:5})},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(12);class r{constructor(e,t){this.game=e,this.name=t,this.type="item"}setName(e){return this.name=e,this}setType(e){return this.type=e,this}load(e){return this.setName(e.name).setType(e.type)}toJSON(){return{name:this.name,type:this.constructor.name}}}r.factory=new s.ItemFactory,t.Item=r,r.factory.add(r)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Factory=class extends Map{add(e){return this.set(e.name,e),this}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(14);class r extends Phaser.Sprite{constructor(e,t,a,s,r){super(e.game,t,a,s,r),this.gameManager=e,this.game.add.existing(this),this.gameManager.gameObjects.push(this)}setPosition(e,t){return this.body.x=e,this.body.y=t,this}setVelocity(e,t){return this.body.velocity.x=e,this.body.velocity.y=t,this}interact(e){return e.interaction(this),this}interaction(e){if(!(e instanceof r))throw new TypeError("Expected gameObject to be a GameObject instance")}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:this.constructor.name,velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}fromJSON(e){return this.frame=e.frame,this.key=e.key,this.name=e.name,this.setPosition(e.position.x,e.position.y).setVelocity(e.velocity.x,e.velocity.y)}}r.factory=new s.GameObjectFactory,t.GameObject=r,r.factory.add(r)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(5),r=a(6),i=a(15);window.onload=function(){const e=new Phaser.Game(800,600,Phaser.AUTO,"game");e.state.add("boot",s.BootState),e.state.add("preloader",i.PreloaderState),e.state.add("play",r.PlayState),e.state.start("boot")}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.BootState=class extends Phaser.State{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.state.start("preloader")}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(7);t.PlayState=class extends Phaser.State{constructor(){super(...arguments),this.gameManager=new s.GameManager(this.game)}preload(){try{this.gameManager.storageManager.load(),console.log("Loaded previous game from storage.")}catch(e){console.log("Loading new game.")}}create(){this.game.add.sprite(this.game.world.centerX,this.game.world.centerY,"logo").anchor.setTo(.5,.5)}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(8);var r;t.GameManager=class{constructor(e){this.game=e,this.mapManager=null,this.storageManager=new s.StorageManager(this),this.gameObjects=[],this.player=null,this.level=r.First}clear(){for(const e of this.gameObjects)e.destroy(!0);return this.gameObjects.length=0,this}},function(e){e[e.First=0]="First"}(r=t.GameLevels||(t.GameLevels={}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(9),r=a(3);t.StorageManager=class{constructor(e){this.gameManager=e}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjects)),localStorage.setItem("level",this.gameManager.level.toString())}load(){this.gameManager.clear();const e=localStorage.getItem("level");if(null===e)throw new Error("Could not find a saved file.");const t=Number(e);this.gameManager.level=t;const a=JSON.parse(localStorage.getItem("gameObjects"));if(a){for(const e of a){const t=r.GameObject.factory.get(e.type);throw t&&new t(this.gameManager,0,0).fromJSON(e),new Error(`Could not find a constructor for ${e.type||"unknown"}. Aborting.`)}this.gameManager.player=this.gameManager.gameObjects.find(e=>e instanceof s.Player)}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(0),r=a(10);class i extends r.Character{constructor(e,t,a){super(e,t,a,"player"),this.hidingSpot=null,this.money=0}hide(e){return e.hidingType!==s.HidingType.none&&(this.setState(s.PlayerState.hidden),this.hidingSpot=e),this}reveal(){return this.hidingSpot&&(this.setState(this.health?s.PlayerState.stand:s.PlayerState.dead),this.hidingSpot=null),this}fromJSON(e){return super.fromJSON(e),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot.toJSON(),money:this.money})}}t.Player=i,i.factory.add(i)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(11),r=a(1),i=a(13),n=a(0),o=a(3);class c extends o.GameObject{constructor(e,t,a,r,i){super(e,t,a,r,i),this.walkSpeed=0,this.runSpeed=0,this.state=n.CharacterState.stand,this.direction=n.Direction.down,this.inventary=new s.Inventory,this.strength=0,this.game.physics.enable(this)}get damageStrength(){const e=this.inventary.active;return e instanceof i.ItemWeapon?e.damage:this.strength}setStrength(e){return this.strength=e,this}setState(e){return this.state=e,this}attack(e){e.damage(this.damageStrength)}kill(){return this.setState(n.CharacterState.dead),super.kill()}walk(){switch(this.setState(n.CharacterState.walk),this.direction){case n.Direction.down:this.setVelocity(0,this.walkSpeed);break;case n.Direction.up:this.setVelocity(0,-this.walkSpeed);break;case n.Direction.left:this.setVelocity(-this.walkSpeed,0);break;default:this.setVelocity(this.walkSpeed,0)}}run(){switch(this.setState(n.CharacterState.run),this.direction){case n.Direction.down:this.setVelocity(0,this.runSpeed);break;case n.Direction.up:this.setVelocity(0,-this.runSpeed);break;case n.Direction.left:this.setVelocity(-this.runSpeed,0);break;default:this.setVelocity(this.runSpeed,0)}}stand(){this.setState(n.CharacterState.stand),this.setVelocity(0,0)}changeDirection(e){this.direction=e}fromJSON(e){super.fromJSON(e),this.direction=e.direction,this.runSpeed=e.runSpeed,this.walkSpeed=e.walkSpeed,this.inventary.clear(),this.inventary.active=new r.Item(this.game,e.inventary.active);for(const t of e.inventary.items)this.inventary.set(t.name,new r.Item(this.game,t.name));return this.setStrength(e.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,inventary:this.inventary.toJSON(),runSpeed:this.runSpeed,strength:this.strength,walkSpeed:this.walkSpeed})}}t.Character=c,c.factory.add(c)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Inventory=class extends Map{setActive(e){return this.active=e,this}toJSON(){return{active:this.active.name,items:[...this.values()]}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(2);t.ItemFactory=class extends s.Factory{}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(1);class r extends s.Item{constructor(){super(...arguments),this.damage=0}setDamage(e){return this.damage=e,this}load(e){return super.load(e).setDamage(e.damage)}toJSON(){return Object.assign({},super.toJSON(),{damage:this.damage})}}t.ItemWeapon=r,s.Item.factory.add(r)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(2);t.GameObjectFactory=class extends s.Factory{}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PreloaderState=class extends Phaser.State{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.image("logo","images/phaser.png")}create(){this.game.state.start("play")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL21pc2MvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2l0ZW1zL0l0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2NvbW1vbi9GYWN0b3J5LnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9nYW1lT2JqZWN0cy9HYW1lT2JqZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0YXRlcy9Cb290U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdGF0ZXMvUGxheVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9tYW5hZ2Vycy9HYW1lTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0cnVjdHVyZXMvbWFuYWdlcnMvU3RvcmFnZU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2dhbWVPYmplY3RzL2NoYXJhY3RlcnMvUGxheWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RydWN0dXJlcy9nYW1lT2JqZWN0cy9jaGFyYWN0ZXJzL0NoYXJhY3Rlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0cnVjdHVyZXMvY29tbW9uL0ludmVudG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0cnVjdHVyZXMvaXRlbXMvSXRlbUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2l0ZW1zL0l0ZW1XZWFwb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zdHJ1Y3R1cmVzL2dhbWVPYmplY3RzL0dhbWVPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvc3RhdGVzL1ByZWxvYWRlclN0YXRlLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRGlyZWN0aW9uIiwiQm91bGRlclN0YXRlIiwiSGlkaW5nVHlwZSIsIkNoYXJhY3RlclN0YXRlIiwiZGVhZCIsInJ1biIsInN0YW5kIiwid2FsayIsIlBsYXllclN0YXRlIiwiYXNzaWduIiwiaGlkZGVuIiwiRW5lbXlTdGF0ZSIsIm9uUm91dGUiLCJwdXJzdWl0IiwiSXRlbUZhY3RvcnlfMSIsIkl0ZW0iLCJbb2JqZWN0IE9iamVjdF0iLCJnYW1lIiwidGhpcyIsInR5cGUiLCJkYXRhIiwic2V0TmFtZSIsInNldFR5cGUiLCJjb25zdHJ1Y3RvciIsImZhY3RvcnkiLCJJdGVtRmFjdG9yeSIsImFkZCIsIkZhY3RvcnkiLCJNYXAiLCJjdG9yIiwic2V0IiwiR2FtZU9iamVjdEZhY3RvcnlfMSIsIkdhbWVPYmplY3QiLCJQaGFzZXIiLCJTcHJpdGUiLCJnYW1lTWFuYWdlciIsIngiLCJ5IiwiZnJhbWUiLCJzdXBlciIsImV4aXN0aW5nIiwiZ2FtZU9iamVjdHMiLCJwdXNoIiwiYm9keSIsInZlbG9jaXR5IiwiZ2FtZU9iamVjdCIsImludGVyYWN0aW9uIiwiVHlwZUVycm9yIiwicG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsInNldFZlbG9jaXR5IiwiR2FtZU9iamVjdEZhY3RvcnkiLCJCb290U3RhdGVfMSIsIlBsYXlTdGF0ZV8xIiwiUHJlbG9hZGVyU3RhdGVfMSIsIndpbmRvdyIsIm9ubG9hZCIsIkdhbWUiLCJBVVRPIiwic3RhdGUiLCJCb290U3RhdGUiLCJQcmVsb2FkZXJTdGF0ZSIsIlBsYXlTdGF0ZSIsInN0YXJ0IiwiU3RhdGUiLCJsb2FkIiwiaW1hZ2UiLCJHYW1lTWFuYWdlcl8xIiwiR2FtZU1hbmFnZXIiLCJzdG9yYWdlTWFuYWdlciIsImNvbnNvbGUiLCJsb2ciLCJfYSIsInNwcml0ZSIsIndvcmxkIiwiY2VudGVyWCIsImNlbnRlclkiLCJhbmNob3IiLCJzZXRUbyIsIlN0b3JhZ2VNYW5hZ2VyXzEiLCJHYW1lTGV2ZWxzIiwibWFwTWFuYWdlciIsIlN0b3JhZ2VNYW5hZ2VyIiwicGxheWVyIiwibGV2ZWwiLCJGaXJzdCIsImRlc3Ryb3kiLCJsZW5ndGgiLCJQbGF5ZXJfMSIsIkdhbWVPYmplY3RfMSIsImxvY2FsU3RvcmFnZSIsImNsZWFyIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b1N0cmluZyIsInJhd0xldmVsIiwiZ2V0SXRlbSIsIkVycm9yIiwiTnVtYmVyIiwicGFyc2UiLCJDdG9yIiwiZnJvbUpTT04iLCJmaW5kIiwiUGxheWVyIiwidHlwZXNfMSIsIkNoYXJhY3Rlcl8xIiwiQ2hhcmFjdGVyIiwiaGlkaW5nU3BvdCIsIm1vbmV5IiwiaGlkaW5nVHlwZSIsIm5vbmUiLCJzZXRTdGF0ZSIsImhlYWx0aCIsInRvSlNPTiIsIkludmVudG9yeV8xIiwiSXRlbV8xIiwiSXRlbVdlYXBvbl8xIiwid2Fsa1NwZWVkIiwicnVuU3BlZWQiLCJkaXJlY3Rpb24iLCJkb3duIiwiaW52ZW50YXJ5IiwiSW52ZW50b3J5Iiwic3RyZW5ndGgiLCJwaHlzaWNzIiwiZW5hYmxlIiwiZGFtYWdlU3RyZW5ndGgiLCJpdGVtIiwiYWN0aXZlIiwiSXRlbVdlYXBvbiIsImRhbWFnZSIsImNoYXJhY3RlciIsImtpbGwiLCJ1cCIsImxlZnQiLCJlbnRyeSIsIml0ZW1zIiwic2V0U3RyZW5ndGgiLCJ2YWx1ZXMiLCJGYWN0b3J5XzEiLCJzZXREYW1hZ2UiLCJsb2FkaW5nQmFyIiwic2V0UHJlbG9hZFNwcml0ZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJ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SUFBSyxpQkFDL0N2RCxLQUFLNEgsV0FBV2pFLE9BQU9DLE1BQU0sRUFBRyxJQUNoQzVELEtBQUsrQyxLQUFLOEUsaUJBQWlCN0gsS0FBSzRILFlBR2hDNUgsS0FBS0QsS0FBS2dELEtBQUtDLE1BQU0sT0FBUSxxQkFHdkJsRCxTQUNORSxLQUFLRCxLQUFLMEMsTUFBTUksTUFBTSIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwiLyoqXG4gKiBUaGUgZGlyZWN0aW9uc1xuICovXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xuXHR1cCxcblx0ZG93bixcblx0cmlnaHQsXG5cdGxlZnRcbn1cblxuLyoqXG4gKiBUaGUgYm91bGRlciBzdGF0ZXNcbiAqL1xuZXhwb3J0IGVudW0gQm91bGRlclN0YXRlIHtcblx0c3RvcCxcblx0bW92ZVxufVxuXG4vKipcbiAqIFRoZSBoaWRpbmcgdHlwZXNcbiAqL1xuZXhwb3J0IGVudW0gSGlkaW5nVHlwZSB7XG5cdG5vbmUsXG5cdGJ1c2hlcyxcblx0Y2F2ZSxcblx0aGF5c3RhY2tcbn1cblxuZXhwb3J0IGNvbnN0IENoYXJhY3RlclN0YXRlOiBJQ2hhcmFjdGVyU3RhdGUgPSB7XG5cdGRlYWQ6IDAsXG5cdHJ1bjogMSxcblx0c3RhbmQ6IDIsXG5cdHdhbGs6IDNcbn07XG5cbmV4cG9ydCBjb25zdCBQbGF5ZXJTdGF0ZTogSVBsYXllclN0YXRlID0ge1xuXHQuLi5DaGFyYWN0ZXJTdGF0ZSxcblx0aGlkZGVuOiA0XG59O1xuXG5leHBvcnQgY29uc3QgRW5lbXlTdGF0ZTogSUVuZW15U3RhdGUgPSB7XG5cdC4uLkNoYXJhY3RlclN0YXRlLFxuXHRvblJvdXRlOiA0LFxuXHRwdXJzdWl0OiA1XG59O1xuXG4vKipcbiAqIFRoZSBjaGFyYWN0ZXIgc3RhdGVzXG4gKi9cbmludGVyZmFjZSBJQ2hhcmFjdGVyU3RhdGUge1xuXHRkZWFkOiAwO1xuXHRydW46IDE7XG5cdHN0YW5kOiAyO1xuXHR3YWxrOiAzO1xufVxuXG4vKipcbiAqIFRoZSBwbGF5ZXIgc3RhdGVzXG4gKi9cbmludGVyZmFjZSBJUGxheWVyU3RhdGUgZXh0ZW5kcyBJQ2hhcmFjdGVyU3RhdGUge1xuXHRoaWRkZW46IDQ7XG59XG5cbi8qKlxuICogVGhlIGVuZW15IHN0YXRlc1xuICovXG5pbnRlcmZhY2UgSUVuZW15U3RhdGUgZXh0ZW5kcyBJQ2hhcmFjdGVyU3RhdGUge1xuXHRvblJvdXRlOiA0O1xuXHRwdXJzdWl0OiA1O1xufVxuIiwiaW1wb3J0IHsgSXRlbUZhY3RvcnkgfSBmcm9tICcuL0l0ZW1GYWN0b3J5JztcblxuZXhwb3J0IGNsYXNzIEl0ZW0ge1xuXG5cdHB1YmxpYyB0eXBlID0gJ2l0ZW0nO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWUsIHB1YmxpYyBuYW1lOiBzdHJpbmcpIHsgfVxuXG5cdHB1YmxpYyBzZXROYW1lKG5hbWU6IHN0cmluZykge1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwdWJsaWMgc2V0VHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIGxvYWQoZGF0YTogSUl0ZW1TZXJpYWxpemVkKSB7XG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5zZXROYW1lKGRhdGEubmFtZSlcblx0XHRcdC5zZXRUeXBlKGRhdGEudHlwZSk7XG5cdH1cblxuXHRwdWJsaWMgdG9KU09OKCk6IElJdGVtU2VyaWFsaXplZCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblx0XHRcdHR5cGU6IHRoaXMuY29uc3RydWN0b3IubmFtZVxuXHRcdH07XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGZhY3RvcnkgPSBuZXcgSXRlbUZhY3RvcnkoKTtcblxufVxuXG5JdGVtLmZhY3RvcnkuYWRkKEl0ZW0pO1xuXG4vKipcbiAqIFRoZSBzZXJpYWxpemVkIGl0ZW0gZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElJdGVtU2VyaWFsaXplZCB7XG5cdG5hbWU6IHN0cmluZztcblx0dHlwZTogc3RyaW5nO1xufVxuIiwiZXhwb3J0IGNsYXNzIEZhY3Rvcnk8ViwgQyBleHRlbmRzIG5ldyAoLi4uYXJnczogYW55W10pID0+IFY+IGV4dGVuZHMgTWFwPHN0cmluZywgQz4ge1xuXG5cdHB1YmxpYyBhZGQoY3RvcjogQykge1xuXHRcdHRoaXMuc2V0KGN0b3IubmFtZSwgY3Rvcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxufVxuIiwiaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuLi9tYW5hZ2Vycy9HYW1lTWFuYWdlcic7XG5pbXBvcnQgeyBHYW1lT2JqZWN0RmFjdG9yeSB9IGZyb20gJy4vR2FtZU9iamVjdEZhY3RvcnknO1xuXG5leHBvcnQgY2xhc3MgR2FtZU9iamVjdCBleHRlbmRzIFBoYXNlci5TcHJpdGUge1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZ2FtZU1hbmFnZXI6IEdhbWVNYW5hZ2VyLCB4OiBudW1iZXIsIHk6IG51bWJlciwga2V5Pzogc3RyaW5nLCBmcmFtZT86IHN0cmluZykge1xuXHRcdHN1cGVyKGdhbWVNYW5hZ2VyLmdhbWUsIHgsIHksIGtleSwgZnJhbWUpO1xuXHRcdC8vIEFkZCB0aGUgZ2FtZW9iamVjdCBpdHNlbGYgdG8gdGhlIGdhbWVcblx0XHR0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKHRoaXMpO1xuXHRcdHRoaXMuZ2FtZU1hbmFnZXIuZ2FtZU9iamVjdHMucHVzaCh0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXQgdGhlIHBvc2l0aW9uIGZvciB0aGlzIGdhbWUgb2JqZWN0XG5cdCAqIEBwYXJhbSB4IFRoZSBuZXcgeCBwb3NpdGlvblxuXHQgKiBAcGFyYW0geSBUaGUgbmV3IHkgcG9zaXRpb25cblx0ICovXG5cdHB1YmxpYyBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuXHRcdHRoaXMuYm9keS54ID0geDtcblx0XHR0aGlzLmJvZHkueSA9IHk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRoZSB2ZWxvY2l0eSBmb3IgdGhpcyBnYW1lIG9iamVjdFxuXHQgKiBAcGFyYW0geCBUaGUgbmV3IHggdmVsb2NpdHlcblx0ICogQHBhcmFtIHkgVGhlIG5ldyB5IHZlbG9jaXR5XG5cdCAqL1xuXHRwdWJsaWMgc2V0VmVsb2NpdHkoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcblx0XHR0aGlzLmJvZHkudmVsb2NpdHkueCA9IHg7XG5cdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnkgPSB5O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEludGVyYWN0cyB3aXRoIGEgZ2FtZSBvYmplY3QgZnJvbSB0aGUgZ2FtZVxuXHQgKiBAcGFyYW0gZ2FtZU9iamVjdCBUaGUgZ2FtZSBvYmplY3QgdG8gaW50ZXJhY3Qgd2l0aFxuXHQgKi9cblx0cHVibGljIGludGVyYWN0KGdhbWVPYmplY3Q6IEdhbWVPYmplY3QpIHtcblx0XHRnYW1lT2JqZWN0LmludGVyYWN0aW9uKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSB0aGUgaW50ZXJhY3Rpb25zIHRvIHRoaXMgZ2FtZSBvYmplY3Rcblx0ICogQHBhcmFtIGdhbWVPYmplY3QgVGhlIGdhbWUgb2JqZWN0IHRoYXQgaW50ZXJhY3RlZCB3aXRoIHRoaXMgaW5zdGFuY2Vcblx0ICovXG5cdHB1YmxpYyBpbnRlcmFjdGlvbihnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSB7XG5cdFx0aWYgKCEoZ2FtZU9iamVjdCBpbnN0YW5jZW9mIEdhbWVPYmplY3QpKVxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgZ2FtZU9iamVjdCB0byBiZSBhIEdhbWVPYmplY3QgaW5zdGFuY2VgKTtcblx0fVxuXG5cdHB1YmxpYyB0b0pTT04oKTogSUdhbWVPYmplY3RTZXJpYWxpemVkIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZnJhbWU6IHRoaXMuZnJhbWUgYXMgc3RyaW5nLFxuXHRcdFx0a2V5OiB0aGlzLmtleSBhcyBzdHJpbmcsXG5cdFx0XHRuYW1lOiB0aGlzLm5hbWUsXG5cdFx0XHRwb3NpdGlvbjoge1xuXHRcdFx0XHR4OiB0aGlzLnBvc2l0aW9uLngsXG5cdFx0XHRcdHk6IHRoaXMucG9zaXRpb24ueVxuXHRcdFx0fSxcblx0XHRcdHR5cGU6IHRoaXMuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdHZlbG9jaXR5OiB7XG5cdFx0XHRcdHg6IHRoaXMuYm9keS52ZWxvY2l0eS54LFxuXHRcdFx0XHR5OiB0aGlzLmJvZHkudmVsb2NpdHkueVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRwdWJsaWMgZnJvbUpTT04oZGF0YTogSUdhbWVPYmplY3RTZXJpYWxpemVkKSB7XG5cdFx0dGhpcy5mcmFtZSA9IGRhdGEuZnJhbWU7XG5cdFx0dGhpcy5rZXkgPSBkYXRhLmtleTtcblx0XHR0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5zZXRQb3NpdGlvbihkYXRhLnBvc2l0aW9uLngsIGRhdGEucG9zaXRpb24ueSlcblx0XHRcdC5zZXRWZWxvY2l0eShkYXRhLnZlbG9jaXR5LngsIGRhdGEudmVsb2NpdHkueSk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGZhY3RvcnkgPSBuZXcgR2FtZU9iamVjdEZhY3RvcnkoKTtcblxufVxuXG5HYW1lT2JqZWN0LmZhY3RvcnkuYWRkKEdhbWVPYmplY3QpO1xuXG4vKipcbiAqIFRoZSBzZXJpYWxpemVkIGdhbWUgb2JqZWN0IGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR2FtZU9iamVjdFNlcmlhbGl6ZWQge1xuXHRmcmFtZTogc3RyaW5nO1xuXHRrZXk6IHN0cmluZztcblx0bmFtZTogc3RyaW5nO1xuXHRwb3NpdGlvbjoge1xuXHRcdHg6IG51bWJlcjtcblx0XHR5OiBudW1iZXI7XG5cdH07XG5cdHR5cGU6IHN0cmluZztcblx0dmVsb2NpdHk6IHtcblx0XHR4OiBudW1iZXI7XG5cdFx0eTogbnVtYmVyO1xuXHR9O1xufVxuIiwiaW1wb3J0IHsgQm9vdFN0YXRlIH0gZnJvbSAnLi9zdGF0ZXMvQm9vdFN0YXRlJztcbmltcG9ydCB7IFBsYXlTdGF0ZSB9IGZyb20gJy4vc3RhdGVzL1BsYXlTdGF0ZSc7XG5pbXBvcnQgeyBQcmVsb2FkZXJTdGF0ZSB9IGZyb20gJy4vc3RhdGVzL1ByZWxvYWRlclN0YXRlJztcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uIG9ubG9hZCgpIHtcblx0Y29uc3QgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICdnYW1lJyk7XG5cblx0Z2FtZS5zdGF0ZS5hZGQoJ2Jvb3QnLCBCb290U3RhdGUpO1xuXHRnYW1lLnN0YXRlLmFkZCgncHJlbG9hZGVyJywgUHJlbG9hZGVyU3RhdGUpO1xuXHRnYW1lLnN0YXRlLmFkZCgncGxheScsIFBsYXlTdGF0ZSk7XG5cblx0Z2FtZS5zdGF0ZS5zdGFydCgnYm9vdCcpO1xufTtcbiIsIlxuZXhwb3J0IGNsYXNzIEJvb3RTdGF0ZSBleHRlbmRzIFBoYXNlci5TdGF0ZSB7XG5cdHB1YmxpYyBwcmVsb2FkKCkge1xuXHRcdC8vIGxvYWQgaGVyZSBhc3NldHMgcmVxdWlyZWQgZm9yIHRoZSBsb2FkaW5nIHNjcmVlblxuXHRcdHRoaXMuZ2FtZS5sb2FkLmltYWdlKCdwcmVsb2FkZXJfYmFyJywgJ2ltYWdlcy9wcmVsb2FkZXJfYmFyLnBuZycpO1xuXHR9XG5cblx0cHVibGljIGNyZWF0ZSgpIHtcblx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWRlcicpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBHYW1lTWFuYWdlciB9IGZyb20gJy4uL3N0cnVjdHVyZXMvbWFuYWdlcnMvR2FtZU1hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgUGxheVN0YXRlIGV4dGVuZHMgUGhhc2VyLlN0YXRlIHtcblx0cHVibGljIGdhbWVNYW5hZ2VyID0gbmV3IEdhbWVNYW5hZ2VyKHRoaXMuZ2FtZSk7XG5cblx0cHVibGljIHByZWxvYWQoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMuZ2FtZU1hbmFnZXIuc3RvcmFnZU1hbmFnZXIubG9hZCgpO1xuXHRcdFx0Y29uc29sZS5sb2coJ0xvYWRlZCBwcmV2aW91cyBnYW1lIGZyb20gc3RvcmFnZS4nKTtcblx0XHR9IGNhdGNoIHtcblx0XHRcdGNvbnNvbGUubG9nKCdMb2FkaW5nIG5ldyBnYW1lLicpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBjcmVhdGUoKSB7XG5cdFx0Y29uc3QgbG9nbyA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKFxuXHRcdFx0dGhpcy5nYW1lLndvcmxkLmNlbnRlclgsIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJZLCAnbG9nbycpO1xuXHRcdGxvZ28uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcblx0fVxuXG59XG4iLCJpbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuLi9nYW1lT2JqZWN0cy9jaGFyYWN0ZXJzL1BsYXllcic7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi4vZ2FtZU9iamVjdHMvR2FtZU9iamVjdCc7XG5pbXBvcnQgeyBNYXBNYW5hZ2VyIH0gZnJvbSAnLi9NYXBNYW5hZ2VyJztcbmltcG9ydCB7IFN0b3JhZ2VNYW5hZ2VyIH0gZnJvbSAnLi9TdG9yYWdlTWFuYWdlcic7XG5cbmV4cG9ydCBjbGFzcyBHYW1lTWFuYWdlciB7XG5cdHB1YmxpYyBtYXBNYW5hZ2VyOiBNYXBNYW5hZ2VyID0gbnVsbDtcblx0cHVibGljIHN0b3JhZ2VNYW5hZ2VyID0gbmV3IFN0b3JhZ2VNYW5hZ2VyKHRoaXMpO1xuXHRwdWJsaWMgZ2FtZU9iamVjdHM6IEdhbWVPYmplY3RbXSA9IFtdO1xuXHRwdWJsaWMgcGxheWVyOiBQbGF5ZXIgPSBudWxsO1xuXHRwdWJsaWMgbGV2ZWwgPSBHYW1lTGV2ZWxzLkZpcnN0O1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWUpIHt9XG5cblx0cHVibGljIGNsZWFyKCkge1xuXHRcdGZvciAoY29uc3QgZ2FtZU9iamVjdCBvZiB0aGlzLmdhbWVPYmplY3RzKSBnYW1lT2JqZWN0LmRlc3Ryb3kodHJ1ZSk7XG5cdFx0dGhpcy5nYW1lT2JqZWN0cy5sZW5ndGggPSAwO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGUgZ2FtZSdzIGxldmVsc1xuICovXG5leHBvcnQgZW51bSBHYW1lTGV2ZWxzIHtcblx0Rmlyc3Rcbn1cbiIsImltcG9ydCB7IFBsYXllciB9IGZyb20gJy4uL2dhbWVPYmplY3RzL2NoYXJhY3RlcnMvUGxheWVyJztcbmltcG9ydCB7IEdhbWVPYmplY3QsIElHYW1lT2JqZWN0U2VyaWFsaXplZCB9IGZyb20gJy4uL2dhbWVPYmplY3RzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuL0dhbWVNYW5hZ2VyJztcblxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VNYW5hZ2VyIHtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBnYW1lTWFuYWdlcjogR2FtZU1hbmFnZXIpIHsgfVxuXG5cdHB1YmxpYyBzYXZlKCkge1xuXHRcdGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdnYW1lT2JqZWN0cycsIEpTT04uc3RyaW5naWZ5KHRoaXMuZ2FtZU1hbmFnZXIuZ2FtZU9iamVjdHMpKTtcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGV2ZWwnLCB0aGlzLmdhbWVNYW5hZ2VyLmxldmVsLnRvU3RyaW5nKCkpO1xuXHR9XG5cblx0cHVibGljIGxvYWQoKSB7XG5cdFx0Ly8gQ2xlYXIgdGhlIGdhbWUgbWFuYWdlclxuXHRcdHRoaXMuZ2FtZU1hbmFnZXIuY2xlYXIoKTtcblxuXHRcdC8vIExvYWQgdGhlIGRhdGFcblx0XHRjb25zdCByYXdMZXZlbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsZXZlbCcpO1xuXHRcdGlmIChyYXdMZXZlbCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBhIHNhdmVkIGZpbGUuYCk7XG5cdFx0Y29uc3QgbGV2ZWwgPSBOdW1iZXIocmF3TGV2ZWwpO1xuXG5cdFx0dGhpcy5nYW1lTWFuYWdlci5sZXZlbCA9IGxldmVsO1xuXG5cdFx0Y29uc3QgZ2FtZU9iamVjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdnYW1lT2JqZWN0cycpKSBhcyBJR2FtZU9iamVjdFNlcmlhbGl6ZWRbXTtcblx0XHRpZiAoZ2FtZU9iamVjdHMpIHtcblx0XHRcdGZvciAoY29uc3QgZ2FtZU9iamVjdCBvZiBnYW1lT2JqZWN0cykge1xuXHRcdFx0XHRjb25zdCBDdG9yID0gR2FtZU9iamVjdC5mYWN0b3J5LmdldChnYW1lT2JqZWN0LnR5cGUpO1xuXHRcdFx0XHRpZiAoQ3RvcikgbmV3IEN0b3IodGhpcy5nYW1lTWFuYWdlciwgMCwgMCkuZnJvbUpTT04oZ2FtZU9iamVjdCk7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgYSBjb25zdHJ1Y3RvciBmb3IgJHtnYW1lT2JqZWN0LnR5cGUgfHwgJ3Vua25vd24nfS4gQWJvcnRpbmcuYCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZ2FtZU1hbmFnZXIucGxheWVyID0gdGhpcy5nYW1lTWFuYWdlci5nYW1lT2JqZWN0cy5maW5kKChnYW1lT2JqZWN0KSA9PiBnYW1lT2JqZWN0IGluc3RhbmNlb2YgUGxheWVyKSBhcyBQbGF5ZXI7XG5cdFx0fVxuXHR9XG5cbn1cbiIsImltcG9ydCB7IEdhbWVNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vbWFuYWdlcnMvR2FtZU1hbmFnZXInO1xuaW1wb3J0IHsgSGlkaW5nVHlwZSwgUGxheWVyU3RhdGUgfSBmcm9tICcuLi8uLi9taXNjL3R5cGVzJztcbmltcG9ydCB7IEhpZGluZ1Nwb3QsIElIaWRpbmdTcG90U2VyaWFsaXplZCB9IGZyb20gJy4uL2hpZGluZ1Nwb3RzL0hpZGluZ1Nwb3QnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyLCBJQ2hhcmFjdGVyU2VyaWFsaXplZCB9IGZyb20gJy4vQ2hhcmFjdGVyJztcblxuZXhwb3J0IGNsYXNzIFBsYXllciBleHRlbmRzIENoYXJhY3RlciB7XG5cblx0cHVibGljIGhpZGluZ1Nwb3Q6IEhpZGluZ1Nwb3QgPSBudWxsO1xuXHRwdWJsaWMgbW9uZXkgPSAwO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihnYW1lTWFuYWdlcjogR2FtZU1hbmFnZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG5cdFx0c3VwZXIoZ2FtZU1hbmFnZXIsIHgsIHksICdwbGF5ZXInKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIaWRlcyB0aGUgcGxheWVyLCBjaGFuZ2luZyB0aGUgc3RhdGUgYW5kIHNldHRpbmcgdGhlIGhpZGluZyBzcG90XG5cdCAqIEBwYXJhbSBoaWRpbmdTcG90IFRoZSBoaWRpbmcgc3BvdFxuXHQgKi9cblx0cHVibGljIGhpZGUoaGlkaW5nU3BvdDogSGlkaW5nU3BvdCkge1xuXHRcdGlmIChoaWRpbmdTcG90LmhpZGluZ1R5cGUgIT09IEhpZGluZ1R5cGUubm9uZSkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZShQbGF5ZXJTdGF0ZS5oaWRkZW4pO1xuXHRcdFx0dGhpcy5oaWRpbmdTcG90ID0gaGlkaW5nU3BvdDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmV2ZWFscyB0aGUgcGxheWVyLCBsZWF2aW5nIHRoZSBoaWRpbmcgcGxhY2UgaWYgdGhlcmUgd2FzIGFueVxuXHQgKi9cblx0cHVibGljIHJldmVhbCgpIHtcblx0XHRpZiAodGhpcy5oaWRpbmdTcG90KSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHRoaXMuaGVhbHRoID8gUGxheWVyU3RhdGUuc3RhbmQgOiBQbGF5ZXJTdGF0ZS5kZWFkKTtcblx0XHRcdHRoaXMuaGlkaW5nU3BvdCA9IG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIGZyb21KU09OKGRhdGE6IElQbGF5ZXJTZXJpYWxpemVkKSB7XG5cdFx0c3VwZXIuZnJvbUpTT04oZGF0YSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwdWJsaWMgdG9KU09OKCk6IElQbGF5ZXJTZXJpYWxpemVkIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3VwZXIudG9KU09OKCksXG5cdFx0XHRoaWRpbmdTcG90OiB0aGlzLmhpZGluZ1Nwb3QudG9KU09OKCksXG5cdFx0XHRtb25leTogdGhpcy5tb25leVxuXHRcdH07XG5cdH1cblxufVxuXG5QbGF5ZXIuZmFjdG9yeS5hZGQoUGxheWVyKTtcblxuLyoqXG4gKiBUaGUgc2VyaWFsaXplZCBwbGF5ZXIgZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQbGF5ZXJTZXJpYWxpemVkIGV4dGVuZHMgSUNoYXJhY3RlclNlcmlhbGl6ZWQge1xuXHRoaWRpbmdTcG90OiBJSGlkaW5nU3BvdFNlcmlhbGl6ZWQ7XG5cdG1vbmV5OiBudW1iZXI7XG59XG4iLCJpbXBvcnQgeyBJSW52ZW50b3J5U2VyaWFsaXplZCwgSW52ZW50b3J5IH0gZnJvbSAnLi4vLi4vY29tbW9uL0ludmVudG9yeSc7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vLi4vaXRlbXMvSXRlbSc7XG5pbXBvcnQgeyBJdGVtV2VhcG9uIH0gZnJvbSAnLi4vLi4vaXRlbXMvSXRlbVdlYXBvbic7XG5pbXBvcnQgeyBHYW1lTWFuYWdlciB9IGZyb20gJy4uLy4uL21hbmFnZXJzL0dhbWVNYW5hZ2VyJztcbmltcG9ydCB7IENoYXJhY3RlclN0YXRlLCBEaXJlY3Rpb24gfSBmcm9tICcuLi8uLi9taXNjL3R5cGVzJztcbmltcG9ydCB7IEdhbWVPYmplY3QsIElHYW1lT2JqZWN0U2VyaWFsaXplZCB9IGZyb20gJy4uL0dhbWVPYmplY3QnO1xuXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyIGV4dGVuZHMgR2FtZU9iamVjdCB7XG5cdHB1YmxpYyB3YWxrU3BlZWQgPSAwO1xuXHRwdWJsaWMgcnVuU3BlZWQgPSAwO1xuXHRwdWJsaWMgc3RhdGU6IG51bWJlciA9IENoYXJhY3RlclN0YXRlLnN0YW5kO1xuXHRwdWJsaWMgZGlyZWN0aW9uID0gRGlyZWN0aW9uLmRvd247XG5cdHB1YmxpYyBpbnZlbnRhcnkgPSBuZXcgSW52ZW50b3J5KCk7XG5cdHB1YmxpYyBzdHJlbmd0aCA9IDA7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKGdhbWVNYW5hZ2VyOiBHYW1lTWFuYWdlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGtleT86IHN0cmluZywgZnJhbWU/OiBzdHJpbmcpIHtcblx0XHRzdXBlcihnYW1lTWFuYWdlciwgeCwgeSwga2V5LCBmcmFtZSk7XG5cdFx0dGhpcy5nYW1lLnBoeXNpY3MuZW5hYmxlKHRoaXMpO1xuXHR9XG5cblx0cHVibGljIGdldCBkYW1hZ2VTdHJlbmd0aCgpIHtcblx0XHRjb25zdCBpdGVtID0gdGhpcy5pbnZlbnRhcnkuYWN0aXZlO1xuXHRcdHJldHVybiBpdGVtIGluc3RhbmNlb2YgSXRlbVdlYXBvbiA/IGl0ZW0uZGFtYWdlIDogdGhpcy5zdHJlbmd0aDtcblx0fVxuXG5cdHB1YmxpYyBzZXRTdHJlbmd0aChzdHJlbmd0aDogbnVtYmVyKSB7XG5cdFx0dGhpcy5zdHJlbmd0aCA9IHN0cmVuZ3RoO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHNldFN0YXRlKHN0YXRlOiBudW1iZXIpIHtcblx0XHR0aGlzLnN0YXRlID0gc3RhdGU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVHJ5IHRvIGF0dGFjayBhIGNoYXJhY3RlclxuXHQgKiBAcGFyYW0gY2hhcmFjdGVyIFRoZSBjaGFyYWN0ZXIgdGhpcyBvbmUgaXMgYXR0ZW1wdGluZyB0byBhdHRhY2tcblx0ICovXG5cdHB1YmxpYyBhdHRhY2soY2hhcmFjdGVyOiBDaGFyYWN0ZXIpIHtcblx0XHRjaGFyYWN0ZXIuZGFtYWdlKHRoaXMuZGFtYWdlU3RyZW5ndGgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEtpbGwgb3ZlcmxvYWQgdG8gc2V0IHRoZSBjaGFyYWN0ZXIncyBzdGF0ZVxuXHQgKi9cblx0cHVibGljIGtpbGwoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZShDaGFyYWN0ZXJTdGF0ZS5kZWFkKTtcblx0XHRyZXR1cm4gc3VwZXIua2lsbCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHN0YXRlIG9mIHRoaXMgY2hhcmFjdGVyIHRvIHdhbGtcblx0ICovXG5cdHB1YmxpYyB3YWxrKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoQ2hhcmFjdGVyU3RhdGUud2Fsayk7XG5cdFx0c3dpdGNoICh0aGlzLmRpcmVjdGlvbikge1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24uZG93bjogdGhpcy5zZXRWZWxvY2l0eSgwLCB0aGlzLndhbGtTcGVlZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24udXA6IHRoaXMuc2V0VmVsb2NpdHkoMCwgLXRoaXMud2Fsa1NwZWVkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIERpcmVjdGlvbi5sZWZ0OiB0aGlzLnNldFZlbG9jaXR5KC10aGlzLndhbGtTcGVlZCwgMCk7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhpcy5zZXRWZWxvY2l0eSh0aGlzLndhbGtTcGVlZCwgMCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHN0YXRlIG9mIHRoaXMgY2hhcmFjdGVyIHRvIHJ1blxuXHQgKi9cblx0cHVibGljIHJ1bigpIHtcblx0XHR0aGlzLnNldFN0YXRlKENoYXJhY3RlclN0YXRlLnJ1bik7XG5cdFx0c3dpdGNoICh0aGlzLmRpcmVjdGlvbikge1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24uZG93bjogdGhpcy5zZXRWZWxvY2l0eSgwLCB0aGlzLnJ1blNwZWVkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIERpcmVjdGlvbi51cDogdGhpcy5zZXRWZWxvY2l0eSgwLCAtdGhpcy5ydW5TcGVlZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBEaXJlY3Rpb24ubGVmdDogdGhpcy5zZXRWZWxvY2l0eSgtdGhpcy5ydW5TcGVlZCwgMCk7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhpcy5zZXRWZWxvY2l0eSh0aGlzLnJ1blNwZWVkLCAwKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc3RhdGUgb2YgdGhpcyBjaGFyYWN0ZXIgdG8gc3RhbmQsIGNoYW5naW5nXG5cdCAqL1xuXHRwdWJsaWMgc3RhbmQoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZShDaGFyYWN0ZXJTdGF0ZS5zdGFuZCk7XG5cdFx0dGhpcy5zZXRWZWxvY2l0eSgwLCAwKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2UgdGhlIGRpcmVjdGlvbiBmb3IgdGhpcyBjaGFyYWN0ZXJcblx0ICogQHBhcmFtIGRpcmVjdGlvbiBUaGUgbmV3IGRpcmVjdGlvblxuXHQgKi9cblx0cHVibGljIGNoYW5nZURpcmVjdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbikge1xuXHRcdHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXHR9XG5cblx0cHVibGljIGZyb21KU09OKGRhdGE6IElDaGFyYWN0ZXJTZXJpYWxpemVkKSB7XG5cdFx0c3VwZXIuZnJvbUpTT04oZGF0YSk7XG5cdFx0dGhpcy5kaXJlY3Rpb24gPSBkYXRhLmRpcmVjdGlvbjtcblx0XHR0aGlzLnJ1blNwZWVkID0gZGF0YS5ydW5TcGVlZDtcblx0XHR0aGlzLndhbGtTcGVlZCA9IGRhdGEud2Fsa1NwZWVkO1xuXHRcdHRoaXMuaW52ZW50YXJ5LmNsZWFyKCk7XG5cdFx0dGhpcy5pbnZlbnRhcnkuYWN0aXZlID0gbmV3IEl0ZW0odGhpcy5nYW1lLCBkYXRhLmludmVudGFyeS5hY3RpdmUpO1xuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgZGF0YS5pbnZlbnRhcnkuaXRlbXMpIHRoaXMuaW52ZW50YXJ5LnNldChlbnRyeS5uYW1lLCBuZXcgSXRlbSh0aGlzLmdhbWUsIGVudHJ5Lm5hbWUpKTtcblx0XHR0aGlzLnNldFN0cmVuZ3RoKGRhdGEuc3RyZW5ndGgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHRvSlNPTigpOiBJQ2hhcmFjdGVyU2VyaWFsaXplZCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnN1cGVyLnRvSlNPTigpLFxuXHRcdFx0ZGlyZWN0aW9uOiB0aGlzLmRpcmVjdGlvbixcblx0XHRcdGludmVudGFyeTogdGhpcy5pbnZlbnRhcnkudG9KU09OKCksXG5cdFx0XHRydW5TcGVlZDogdGhpcy5ydW5TcGVlZCxcblx0XHRcdHN0cmVuZ3RoOiB0aGlzLnN0cmVuZ3RoLFxuXHRcdFx0d2Fsa1NwZWVkOiB0aGlzLndhbGtTcGVlZCxcblx0XHR9O1xuXHR9XG5cbn1cblxuQ2hhcmFjdGVyLmZhY3RvcnkuYWRkKENoYXJhY3Rlcik7XG5cbi8qKlxuICogVGhlIHNlcmlhbGl6ZWQgY2hhcmFjdGVyIGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ2hhcmFjdGVyU2VyaWFsaXplZCBleHRlbmRzIElHYW1lT2JqZWN0U2VyaWFsaXplZCB7XG5cdGRpcmVjdGlvbjogbnVtYmVyO1xuXHRpbnZlbnRhcnk6IElJbnZlbnRvcnlTZXJpYWxpemVkO1xuXHRydW5TcGVlZDogbnVtYmVyO1xuXHRzdHJlbmd0aDogbnVtYmVyO1xuXHR3YWxrU3BlZWQ6IG51bWJlcjtcbn1cbiIsImltcG9ydCB7IElJdGVtU2VyaWFsaXplZCwgSXRlbSB9IGZyb20gJy4uL2l0ZW1zL0l0ZW0nO1xuXG5leHBvcnQgY2xhc3MgSW52ZW50b3J5IGV4dGVuZHMgTWFwPHN0cmluZywgSXRlbT4ge1xuXG5cdHB1YmxpYyBhY3RpdmU6IEl0ZW07XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgYWN0aXZlIGl0ZW0gZnJvbSB0aGUgaW52ZW50b3J5XG5cdCAqIEBwYXJhbSBpdGVtIFRoZSBuZXcgYWN0aXZlIGl0ZW1cblx0ICovXG5cdHB1YmxpYyBzZXRBY3RpdmUoaXRlbTogSXRlbSkge1xuXHRcdHRoaXMuYWN0aXZlID0gaXRlbTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHB1YmxpYyB0b0pTT04oKTogSUludmVudG9yeVNlcmlhbGl6ZWQge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhY3RpdmU6IHRoaXMuYWN0aXZlLm5hbWUsXG5cdFx0XHRpdGVtczogWy4uLnRoaXMudmFsdWVzKCldXG5cdFx0fTtcblx0fVxuXG59XG5cbi8qKlxuICogVGhlIHNlcmlhbGl6ZWQgaW52ZW50b3J5IGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW52ZW50b3J5U2VyaWFsaXplZCB7XG5cdGFjdGl2ZTogc3RyaW5nO1xuXHRpdGVtczogSUl0ZW1TZXJpYWxpemVkW107XG59XG4iLCJpbXBvcnQgeyBGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uL0ZhY3RvcnknO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gJy4vSXRlbSc7XG5cbmV4cG9ydCBjbGFzcyBJdGVtRmFjdG9yeSBleHRlbmRzIEZhY3Rvcnk8SXRlbSwgdHlwZW9mIEl0ZW0+eyB9XG4iLCJpbXBvcnQgeyBJSXRlbVNlcmlhbGl6ZWQsIEl0ZW0gfSBmcm9tICcuL0l0ZW0nO1xuXG5leHBvcnQgY2xhc3MgSXRlbVdlYXBvbiBleHRlbmRzIEl0ZW0ge1xuXHRwdWJsaWMgZGFtYWdlID0gMDtcblxuXHQvKipcblx0ICogU2V0IHRoZSBkYW1hZ2UgZm9yIHRoaXMgd2VhcG9uXG5cdCAqIEBwYXJhbSBkYW1hZ2UgVGhlIGRhbWFnZSB0aGlzIHdlYXBvbiBkZWFsc1xuXHQgKi9cblx0cHVibGljIHNldERhbWFnZShkYW1hZ2U6IG51bWJlcikge1xuXHRcdHRoaXMuZGFtYWdlID0gZGFtYWdlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIGxvYWQoZGF0YTogSUl0ZW1XZWFwb25TZXJpYWxpemVkKSB7XG5cdFx0cmV0dXJuIHN1cGVyLmxvYWQoZGF0YSkuc2V0RGFtYWdlKGRhdGEuZGFtYWdlKTtcblx0fVxuXG5cdHB1YmxpYyB0b0pTT04oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnN1cGVyLnRvSlNPTigpLFxuXHRcdFx0ZGFtYWdlOiB0aGlzLmRhbWFnZVxuXHRcdH07XG5cdH1cblxufVxuXG5JdGVtLmZhY3RvcnkuYWRkKEl0ZW1XZWFwb24pO1xuXG4vKipcbiAqIFRoZSBzZXJpYWxpemVkIGl0ZW0gd2VhcG9uIGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSXRlbVdlYXBvblNlcmlhbGl6ZWQgZXh0ZW5kcyBJSXRlbVNlcmlhbGl6ZWQge1xuXHRkYW1hZ2U6IG51bWJlcjtcbn1cbiIsImltcG9ydCB7IEZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24vRmFjdG9yeSc7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9HYW1lT2JqZWN0JztcblxuZXhwb3J0IGNsYXNzIEdhbWVPYmplY3RGYWN0b3J5IGV4dGVuZHMgRmFjdG9yeTxHYW1lT2JqZWN0LCB0eXBlb2YgR2FtZU9iamVjdD57IH1cbiIsImV4cG9ydCBjbGFzcyBQcmVsb2FkZXJTdGF0ZSBleHRlbmRzIFBoYXNlci5TdGF0ZSB7XG5cblx0cHJpdmF0ZSBsb2FkaW5nQmFyOiBQaGFzZXIuU3ByaXRlO1xuXG5cdHB1YmxpYyBwcmVsb2FkKCkge1xuXHRcdHRoaXMubG9hZGluZ0JhciA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDI0MCwgJ3ByZWxvYWRlcl9iYXInKTtcblx0XHR0aGlzLmxvYWRpbmdCYXIuYW5jaG9yLnNldFRvKDAsIDAuNSk7XG5cdFx0dGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5sb2FkaW5nQmFyKTtcblxuXHRcdC8vIFRPRE86IGxvYWQgaGVyZSB0aGUgYXNzZXRzIGZvciB0aGUgZ2FtZVxuXHRcdHRoaXMuZ2FtZS5sb2FkLmltYWdlKCdsb2dvJywgJ2ltYWdlcy9waGFzZXIucG5nJyk7XG5cdH1cblxuXHRwdWJsaWMgY3JlYXRlKCkge1xuXHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgncGxheScpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9