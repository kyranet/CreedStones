!function(e){var t={};function a(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,s){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(s,r,function(t){return e[t]}.bind(null,r));return s},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=4)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.up=0]="up",e[e.down=1]="down",e[e.right=2]="right",e[e.left=3]="left"}(t.Direction||(t.Direction={})),function(e){e[e.stop=0]="stop",e[e.move=1]="move"}(t.BoulderState||(t.BoulderState={})),function(e){e[e.none=0]="none",e[e.bushes=1]="bushes",e[e.cave=2]="cave",e[e.haystack=3]="haystack"}(t.HidingType||(t.HidingType={})),t.CharacterState={dead:0,run:1,stand:2,walk:3},t.PlayerState=Object.assign({},t.CharacterState,{hidden:4}),t.EnemyState=Object.assign({},t.CharacterState,{onRoute:4,pursuit:5})},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(13);class r{constructor(e,t){this.game=e,this.name=t,this.type="item"}setName(e){return this.name=e,this}setType(e){return this.type=e,this}load(e){return this.setName(e.name).setType(e.type)}toJSON(){return{name:this.name,type:this.constructor.name}}}r.factory=new s.ItemFactory,t.Item=r,r.factory.add(r)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Factory=class extends Map{add(e){return this.set(e.name,e),this}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(15);class r extends Phaser.Sprite{constructor(e,t,a,s,r){super(e.game,t,a,s,r),this.gameManager=e,this.game.add.existing(this),this.gameManager.gameObjects.push(this)}setPosition(e,t){return this.body.x=e,this.body.y=t,this}setVelocity(e,t){return this.body.velocity.x=e,this.body.velocity.y=t,this}interact(e){return e.interaction(this),this}interaction(e){if(!(e instanceof r))throw new TypeError("Expected gameObject to be a GameObject instance")}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:this.constructor.name,velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}fromJSON(e){return this.frame=e.frame,this.key=e.key,this.name=e.name,this.setPosition(e.position.x,e.position.y).setVelocity(e.velocity.x,e.velocity.y)}}r.factory=new s.GameObjectFactory,t.GameObject=r,r.factory.add(r)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(5),r=a(6),n=a(7),i=a(16);window.onload=function(){const e=new Phaser.Game(800,600,Phaser.AUTO,"game");e.state.add("boot",s.BootState),e.state.add("preloader",i.PreloaderState),e.state.add("play",n.PlayState),e.state.add("menu",r.MenuState),e.state.start("boot")}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.BootState=class extends Phaser.State{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.state.start("preloader")}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.MenuState=class extends Phaser.State{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),console.log(this.game.state.states),this.createButton("New Game",()=>this.game.state.start("play")),localStorage.getItem("level")&&this.createButton("Continue",()=>this.game.state.states.play.gameManager.storageManager.load())}createButton(e,t){const a=this.game.add.text(this.game.world.centerX,this.game.world.centerY,e,{font:"65px Arial",fill:"#CDCDCD",align:"center"});a.anchor.set(.5),a.inputEnabled=!0,a.events.onInputUp.add(t,this),a.events.onInputDown.add(()=>{a.fill="#FF0044",a.events.onInputOver.removeAll(),a.events.onInputOut.removeAll()}),a.events.onInputOver.add(()=>{a.fill="#FFFFFF"}),a.events.onInputOut.add(()=>{a.fill="#EFEFEF"}),this.texts.push(a),a.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,16)}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(8);t.PlayState=class extends Phaser.State{constructor(){super(...arguments),this.gameManager=new s.GameManager(this.game)}preload(){try{this.gameManager.storageManager.load(),console.log("Loaded previous game from storage.")}catch(e){console.log("Loading new game.")}}create(){this.game.add.sprite(this.game.world.centerX,this.game.world.centerY,"logo").anchor.setTo(.5,.5)}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(9);var r;t.GameManager=class{constructor(e){this.game=e,this.mapManager=null,this.storageManager=new s.StorageManager(this),this.gameObjects=[],this.player=null,this.level=r.First}clear(){for(const e of this.gameObjects)e.destroy(!0);return this.gameObjects.length=0,this}},function(e){e[e.First=0]="First"}(r=t.GameLevels||(t.GameLevels={}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(10),r=a(3);t.StorageManager=class{constructor(e){this.gameManager=e}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjects)),localStorage.setItem("level",this.gameManager.level.toString())}load(){this.gameManager.clear();const e=localStorage.getItem("level");if(null===e)throw new Error("Could not find a saved file.");const t=Number(e);this.gameManager.level=t;const a=JSON.parse(localStorage.getItem("gameObjects"));if(a){for(const e of a){const t=r.GameObject.factory.get(e.type);throw t&&new t(this.gameManager,0,0).fromJSON(e),new Error(`Could not find a constructor for ${e.type||"unknown"}. Aborting.`)}this.gameManager.player=this.gameManager.gameObjects.find(e=>e instanceof s.Player)}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(0),r=a(11);class n extends r.Character{constructor(e,t,a){super(e,t,a,"player"),this.hidingSpot=null,this.money=0}hide(e){return e.hidingType!==s.HidingType.none&&(this.setState(s.PlayerState.hidden),this.hidingSpot=e),this}reveal(){return this.hidingSpot&&(this.setState(this.health?s.PlayerState.stand:s.PlayerState.dead),this.hidingSpot=null),this}fromJSON(e){return super.fromJSON(e),this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot.toJSON(),money:this.money})}}t.Player=n,n.factory.add(n)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(12),r=a(1),n=a(14),i=a(0),o=a(3);class c extends o.GameObject{constructor(e,t,a,r,n){super(e,t,a,r,n),this.walkSpeed=0,this.runSpeed=0,this.state=i.CharacterState.stand,this.direction=i.Direction.down,this.inventary=new s.Inventory,this.strength=0,this.game.physics.enable(this)}get damageStrength(){const e=this.inventary.active;return e instanceof n.ItemWeapon?e.damage:this.strength}setStrength(e){return this.strength=e,this}setState(e){return this.state=e,this}attack(e){e.damage(this.damageStrength)}kill(){return this.setState(i.CharacterState.dead),super.kill()}walk(){switch(this.setState(i.CharacterState.walk),this.direction){case i.Direction.down:this.setVelocity(0,this.walkSpeed);break;case i.Direction.up:this.setVelocity(0,-this.walkSpeed);break;case i.Direction.left:this.setVelocity(-this.walkSpeed,0);break;default:this.setVelocity(this.walkSpeed,0)}}run(){switch(this.setState(i.CharacterState.run),this.direction){case i.Direction.down:this.setVelocity(0,this.runSpeed);break;case i.Direction.up:this.setVelocity(0,-this.runSpeed);break;case i.Direction.left:this.setVelocity(-this.runSpeed,0);break;default:this.setVelocity(this.runSpeed,0)}}stand(){this.setState(i.CharacterState.stand),this.setVelocity(0,0)}changeDirection(e){this.direction=e}fromJSON(e){super.fromJSON(e),this.direction=e.direction,this.runSpeed=e.runSpeed,this.walkSpeed=e.walkSpeed,this.inventary.clear(),this.inventary.active=new r.Item(this.game,e.inventary.active);for(const t of e.inventary.items)this.inventary.set(t.name,new r.Item(this.game,t.name));return this.setStrength(e.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,inventary:this.inventary.toJSON(),runSpeed:this.runSpeed,strength:this.strength,walkSpeed:this.walkSpeed})}}t.Character=c,c.factory.add(c)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Inventory=class extends Map{setActive(e){return this.active=e,this}toJSON(){return{active:this.active.name,items:[...this.values()]}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(2);t.ItemFactory=class extends s.Factory{}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(1);class r extends s.Item{constructor(){super(...arguments),this.damage=0}setDamage(e){return this.damage=e,this}load(e){return super.load(e).setDamage(e.damage)}toJSON(){return Object.assign({},super.toJSON(),{damage:this.damage})}}t.ItemWeapon=r,s.Item.factory.add(r)},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=a(2);t.GameObjectFactory=class extends s.Factory{}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PreloaderState=class extends Phaser.State{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,