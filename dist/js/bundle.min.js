!function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(a,o,function(t){return e[t]}.bind(null,o));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=r(1),o=r(2),n=r(3);window.onload=function(){const e=new Phaser.Game(800,600,Phaser.AUTO,"game");e.state.add("boot",a.BootState),e.state.add("preloader",n.PreloaderState),e.state.add("play",o.PlayState),e.state.start("boot")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.BootState=class extends Phaser.State{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.state.start("preloader")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PlayState=class extends Phaser.State{create(){this.game.add.sprite(this.game.world.centerX,this.game.world.centerY,"logo").anchor.setTo(.5,.5)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PreloaderState=class extends Phaser.State{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.image("logo","images/phaser.png")}create(){this.game.state.start("play")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,