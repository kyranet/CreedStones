!function(e){var t={};function s(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(a,r,function(t){return e[t]}.bind(null,r));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=4)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.up=0]="up",e[e.down=1]="down",e[e.right=2]="right",e[e.left=3]="left"}(t.Direction||(t.Direction={})),function(e){e[e.stop=0]="stop",e[e.move=1]="move"}(t.BoulderState||(t.BoulderState={})),function(e){e[e.none=0]="none",e[e.bushes=1]="bushes",e[e.cave=2]="cave",e[e.haystack=3]="haystack"}(t.HidingType||(t.HidingType={})),t.CharacterState={dead:0,run:1,stand:2,walk:3},t.PlayerState=Object.assign({},t.CharacterState,{hidden:4}),t.EnemyState=Object.assign({},t.CharacterState,{onRoute:4,pursuit:5})},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(15);class r{constructor(e,t){this.game=e,this.name=t,this.type="item"}setName(e){return this.name=e,this}setType(e){return this.type=e,this}load(e){return this.setName(e.name).setType(e.type)}toJSON(){return{name:this.name,type:this.constructor.name}}}r.factory=new a.ItemFactory,t.Item=r,r.factory.add(r)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Factory=class extends Map{add(e){return this.set(e.name,e),this}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(17);class r extends Phaser.Sprite{constructor(e,t,s,a,r){super(e.game,t,s,a,r),this.gameManager=e,this.game.add.existing(this),this.gameManager.gameObjects.push(this)}setPosition(e,t){return this.body.x=e,this.body.y=t,this}setVelocity(e,t){return this.body.velocity.x=e,this.body.velocity.y=t,this}interact(e){return e.interaction(this),this}interaction(e){if(!(e instanceof r))throw new TypeError("Expected gameObject to be a GameObject instance")}toJSON(){return{frame:this.frame,key:this.key,name:this.name,position:{x:this.position.x,y:this.position.y},type:this.constructor.name,velocity:{x:this.body.velocity.x,y:this.body.velocity.y}}}fromJSON(e){return this.frame=e.frame,this.key=e.key,this.name=e.name,this.setPosition(e.position.x,e.position.y).setVelocity(e.velocity.x,e.velocity.y)}}r.factory=new a.GameObjectFactory,t.GameObject=r,r.factory.add(r)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(5),r=s(6),i=s(7),n=s(9),o=s(18),c=s(19);window.onload=function(){const e=new Phaser.Game(c.WIN_WIDTH,c.WIN_HEIGHT,Phaser.AUTO,"game");e.state.add("boot",a.BootState),e.state.add("preloader",o.PreloaderState),e.state.add("play",n.PlayState),e.state.add("menu",r.MenuState),e.state.add("newGame",i.NewGameState),e.state.start("boot")}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.BootState=class extends Phaser.State{preload(){this.game.load.image("preloader_bar","images/preloader_bar.png")}create(){this.game.state.start("preloader")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.MenuState=class extends Phaser.State{constructor(){super(...arguments),this.texts=[],this.logo=null}create(){this.game.stage.backgroundColor="#2A1B19",this.logo=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY-120,"logo"),this.logo.anchor.setTo(.5,.5),this.logo.scale.setTo(.5,.5),this.createButton("New Game",()=>{this.game.state.start("newGame")}),localStorage.getItem("level")&&this.createButton("Continue",()=>{this.game.state.states.play.gameManager.storageManager.load()})}shutdown(){for(const e of this.texts)e.destroy(!0);this.texts.length=0,this.logo.destroy(!0),super.shutdown()}createButton(e,t){const s=this.game.add.text(this.game.world.centerX,this.game.world.centerY,e,{font:"65px Arial",fill:"#CDCDCD",align:"center"});s.anchor.set(.5),s.inputEnabled=!0,s.events.onInputUp.add(t,this),s.events.onInputDown.add(()=>{s.fill="#FF0044",s.events.onInputOver.removeAll(),s.events.onInputOut.removeAll()}),s.events.onInputOver.add(()=>{s.fill="#FFFFFF"}),s.events.onInputOut.add(()=>{s.fill="#EFEFEF"}),this.texts.push(s),s.alignTo(this.texts.length?this.texts[this.texts.length-1]:this.logo,Phaser.BOTTOM_CENTER,16)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(8);t.NewGameState=class extends Phaser.State{create(){const e=this.game.add.text(this.game.world.centerX,this.game.world.centerY-65,"Insert your name",{font:"65px Arial",fill:"#CDCDCD",align:"center"});e.anchor.setTo(.5,.5);const t=this.game.add.text(this.game.world.centerX,this.game.world.centerY,"",{font:"65px Arial",fill:"#CDCDCD",align:"center"});t.anchor.setTo(.5,.5),t.alignTo(e,Phaser.BOTTOM_CENTER,0,25),a.readLine(t,s=>{this.game.state.states.play.gameManager.playerName=s,e.destroy(!0),t.destroy(!0),this.game.state.start("play")},{maximumLength:20})}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.chunk=function(e,t){const s=e.slice(),a=[];for(;s.length;)a.push(s.splice(0,t));return a},t.readLine=function(e,t,s){const a=[],r="maximumLength"in s?s.maximumLength:100,i=s=>{if("Enter"===s.key)return document.removeEventListener("keydown",i),void t(a.join(""));if("Backspace"===s.key)a.length&&a.pop();else{if(!(a.length<=r&&/^[\(\)\[\]\w\d\-!?¡¿ ]$/.test(s.key)))return;a.push(s.key)}e.text=a.join("")};document.addEventListener("keydown",i)}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(10);t.PlayState=class extends Phaser.State{constructor(){super(...arguments),this.gameManager=new a.GameManager(this.game)}create(){const e=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY,"logo");e.anchor.setTo(.5,.5),e.scale.setTo(.5,.5),this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT,Phaser.Keyboard.RIGHT,Phaser.Keyboard.UP,Phaser.Keyboard.DOWN,Phaser.Keyboard.SPACEBAR])}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(11);var r;t.GameManager=class{constructor(e){this.game=e,this.mapManager=null,this.storageManager=new a.StorageManager(this),this.gameObjects=[],this.player=null,this.playerName=null,this.level=r.First}clear(){for(const e of this.gameObjects)e.destroy(!0);return this.gameObjects.length=0,this}},function(e){e[e.First=0]="First"}(r=t.GameLevels||(t.GameLevels={}))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(12),r=s(3);t.StorageManager=class{constructor(e){this.gameManager=e}save(){localStorage.clear(),localStorage.setItem("gameObjects",JSON.stringify(this.gameManager.gameObjects)),localStorage.setItem("level",this.gameManager.level.toString()),localStorage.setItem("playerName",this.gameManager.playerName)}load(){this.gameManager.clear();const e=localStorage.getItem("level");if(null===e)throw new Error("Could not find a saved file.");const t=Number(e);this.gameManager.level=t;const s=JSON.parse(localStorage.getItem("gameObjects"));if(s){for(const e of s){const t=r.GameObject.factory.get(e.type);throw t&&new t(this.gameManager,0,0).fromJSON(e),new Error(`Could not find a constructor for ${e.type||"unknown"}. Aborting.`)}this.gameManager.player=this.gameManager.gameObjects.find(e=>e instanceof a.Player)}const i=localStorage.getItem("playerName");i&&(this.gameManager.playerName=i)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(0),r=s(13);class i extends r.Character{constructor(e,t,s){super(e,t,s,"player"),this.hidingSpot=null,this.money=0,this.directions={down:!1,left:!1,right:!1,up:!1},this.game.camera.follow(this)}update(){this.directions.down=this.game.input.keyboard.isDown(Phaser.Keyboard.DOWN),this.directions.left=this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT),this.directions.right=this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT),this.directions.up=this.game.input.keyboard.isDown(Phaser.Keyboard.UP);const e=this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT);this.directions.down!==this.directions.up?(this.direction=this.directions.down?a.Direction.down:a.Direction.up,e?this.run():this.walk()):this.directions.left!==this.directions.right?(this.direction=this.directions.left?a.Direction.left:a.Direction.right,e?this.run():this.walk()):this.stand()}hide(e){return e.hidingType!==a.HidingType.none&&(this.setState(a.PlayerState.hidden),this.hidingSpot=e),this}reveal(){return this.hidingSpot&&(this.setState(this.health?a.PlayerState.stand:a.PlayerState.dead),this.hidingSpot=null),this}fromJSON(e){return super.fromJSON(e),this.money=e.money,this}toJSON(){return Object.assign({},super.toJSON(),{hidingSpot:this.hidingSpot.toJSON(),money:this.money})}}t.Player=i,i.factory.add(i)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(14),r=s(1),i=s(16),n=s(0),o=s(3);class c extends o.GameObject{constructor(e,t,s,r,i){super(e,t,s,r,i),this.walkSpeed=0,this.runSpeed=0,this.state=n.CharacterState.stand,this.direction=n.Direction.down,this.inventory=new a.Inventory,this.strength=0,this.game.physics.enable(this)}get damageStrength(){const e=this.inventory.active;return e instanceof i.ItemWeapon?e.damage:this.strength}setStrength(e){return this.strength=e,this}setState(e){return this.state=e,this}attack(e){e.damage(this.damageStrength)}kill(){return this.setState(n.CharacterState.dead),super.kill()}walk(){switch(this.setState(n.CharacterState.walk),this.direction){case n.Direction.down:this.setVelocity(0,this.walkSpeed);break;case n.Direction.up:this.setVelocity(0,-this.walkSpeed);break;case n.Direction.left:this.setVelocity(-this.walkSpeed,0);break;default:this.setVelocity(this.walkSpeed,0)}}run(){switch(this.setState(n.CharacterState.run),this.direction){case n.Direction.down:this.setVelocity(0,this.runSpeed);break;case n.Direction.up:this.setVelocity(0,-this.runSpeed);break;case n.Direction.left:this.setVelocity(-this.runSpeed,0);break;default:this.setVelocity(this.runSpeed,0)}}stand(){this.setState(n.CharacterState.stand),this.setVelocity(0,0)}changeDirection(e){this.direction=e}fromJSON(e){super.fromJSON(e),this.direction=e.direction,this.runSpeed=e.runSpeed,this.walkSpeed=e.walkSpeed,this.inventory.clear(),this.inventory.active=new r.Item(this.game,e.inventory.active);for(const t of e.inventory.items)this.inventory.set(t.name,new r.Item(this.game,t.name));return this.setStrength(e.strength),this}toJSON(){return Object.assign({},super.toJSON(),{direction:this.direction,inventory:this.inventory.toJSON(),runSpeed:this.runSpeed,strength:this.strength,walkSpeed:this.walkSpeed})}}t.Character=c,c.factory.add(c)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Inventory=class extends Map{setActive(e){return this.active=e,this}toJSON(){return{active:this.active.name,items:[...this.values()]}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(2);t.ItemFactory=class extends a.Factory{}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(1);class r extends a.Item{constructor(){super(...arguments),this.damage=0}setDamage(e){return this.damage=e,this}load(e){return super.load(e).setDamage(e.damage)}toJSON(){return Object.assign({},super.toJSON(),{damage:this.damage})}}t.ItemWeapon=r,a.Item.factory.add(r)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=s(2);t.GameObjectFactory=class extends a.Factory{}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.PreloaderState=class extends Phaser.State{preload(){this.loadingBar=this.game.add.sprite(0,240,"preloader_bar"),this.loadingBar.anchor.setTo(0,.5),this.load.setPreloadSprite(this.loadingBar),this.game.load.image("logo","images/StonesCreed.png")}create(){this.game.state.start("menu")}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WIN_WIDTH=800,t.WIN_HEIGHT=600}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,